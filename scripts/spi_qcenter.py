import sys
import os
import argparse
import yaml
import h5py
import re
import numpy as np
from PIL import Image
from spipy.analyse import saxs
from mpi4py import MPI

comm = MPI.COMM_WORLD
m_rank = comm.Get_rank()
m_size = comm.Get_size()

if __name__ == '__main__':

    # parse cmd arguments
    parser = argparse.ArgumentParser(
        allow_abbrev=False,
        description = "Calculate coordinates of central point (q=0) of diffraction patterns.")
    parser.add_argument("-l", "--evtlist", type=str, help="Event list file generated by spi_events.", required=True)
    parser.add_argument("-o", "--output", type=str, help="Output HDF5 file.", required=True)
    parser.add_argument("--initc", type=str, default="none", help="A roughly estimated center location, 'Cx,Cy', default is using geometry center.")
    parser.add_argument("--maskfile", type=str, default="none", help="Mask file, HDF5/CXI or .npy file. Masked pixels have the value of 1. Default is none.")
    parser.add_argument("--mask_h5loc", type=str, default="none", help="The mask data location if --maskfile is HDF5 file, default is none.")
    parser.add_argument("--hczone", type=int, default=20, help="Radius of a central area (in pixel) to search centers, default=20.")
    parser.add_argument("--frzone", type=int, default=50, help="Radius of a central area (in pixel) to sample Frediel pairs, default=50.")
    parser.add_argument("--refine", action="store_true", default=False, help="Set to start center location refinement.")
    parser.add_argument("--refine_sampling", type=int, default=400, help="Number of pixels sampled from pattern to do refinement, default=400.")
    parser.add_argument("--refine_roir", type=int, default=20, help="Radius of a ROI to do pixel sampling, in pixel, default=20.")
    parser.add_argument("-j", type=int, default=1, help="Number of processes, default=1.")
    args = parser.parse_args()

    # get parameters
    with open(args.evtlist, "r") as fp:
        evts = fp.read()
    evts = yaml.load(evts, Loader=yaml.FullLoader)
    if args.refine:
        r_sampling = args.refine_sampling
        r_roir = args.refine_roir
    # check output folder
    output_file = os.path.abspath(args.output)
    output_folder = os.path.dirname(output_file)
    if not os.path.isdir(output_folder):
        if m_rank == 0: raise RuntimeError("Output folder is invalid.")
        else: sys.exit(0)
    # get estimated center
    if args.initc.upper() != "NONE":
        try:
            init_c = list(map(float, args.initc.split(",")))
            if len(init_c) != 2: raise ValueError("")
        except Exception as err:
            if m_rank == 0: print("[Error] The value of --initc options is invalid (%s)." % err)
            sys.exit(0)
    else:
        init_c = None
    # mask file
    if args.maskfile.upper() != "NONE":
        if not os.path.exists(args.maskfile):
            if m_rank == 0: print("[Error] Input maskfile is invalid.")
            sys.exit(0)
        mext = os.path.splitext(args.maskfile)[-1]
        try:
            if mext == ".npy":
                mask = np.load(args.maskfile)
            elif mext == ".h5" or mext == ".cxi":
                with h5py.File(args.maskfile, 'r') as fp:
                    mask = fp[args.mask_h5loc][()]
            else:
                raise RuntimeError("Unknown mask file format %s" % mext)
        except Exception as err:
            if m_rank == 0: print("[Error] Fail to load mask file (%s)." % err)
            sys.exit(0)
    else:
        mask = None

    # search center
    files = evts.keys()
    pi = 0
    center = {}
    for i, file in enumerate(files):
        fext = os.path.splitext(file)[-1]
        datasets = evts[file].keys()
        center[file] = {}
        if fext == ".h5" or fext == ".cxi":
            with h5py.File(file, 'r') as fp:
                for j, dt in enumerate(datasets):
                    center[file][dt] = {}
                    dt_dim = len(fp[dt].shape)
                    num = evts[file][dt]
                    for k in range(num):
                        if pi % m_size != m_rank:
                            pi += 1
                            continue
                        if dt_dim == 2: pattern = fp[dt][()]
                        else: pattern = fp[dt][k]
                        c = saxs.friedel_search(pattern, init_c, mask, args.hczone, args.frzone)
                        if args.refine:
                            c = saxs.center_refine(pattern, c, mask, r_sampling, r_roir)
                        center[file][dt][k] = c
                        pi += 1
        elif fext == ".tif":
            if pi % m_size != m_rank:
                pi += 1
                continue
            dt = list(evts[file].keys())[0]
            center[file][dt] = {}
            pattern = np.asarray(Image.open(file))
            c = saxs.friedel_search(pattern, init_c, mask, args.hczone, args.frzone)
            if args.refine:
                c = saxs.center_refine(pattern, c, mask, r_sampling, r_roir)
            center[file][dt][0] = c
            pi += 1
        else:
            if m_rank == 0: print("Unknown data file format (%s)." % fext)
            sys.exit(0)

    # gather and save
    center_all = comm.gather(center, root=0)
    if m_rank == 0:
        result = {}
        for cpart in center_all:
            for fname, ddict in cpart.items():
                if fname not in result.keys(): result[fname] = {}
                for dname, cdict in ddict.items():
                    if dname not in result[fname].keys():
                        num = evts[fname][dname]
                        result[fname][dname] = [[-1,-1]] * num
                    for idx, c in cdict.items():
                        result[fname][dname][idx] = c
        with h5py.File(output_file, 'w') as fp:
            for fname, ddict in result.items():
                for dname, cdata in ddict.items():
                    ffname = re.sub(r"/", r"%", fname)
                    fp.create_dataset("%s/%s"%(ffname,dname), data=cdata)

    if m_rank == 0:
        with h5py.File(output_file, 'a') as fp:
            fp.create_dataset("information", data=h5py.Empty(int))
            fp["information"].attrs["cmd_line"] = " ".join(sys.argv)

    MPI.Finalize()

    